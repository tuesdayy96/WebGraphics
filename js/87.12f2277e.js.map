{"version":3,"file":"js/87.12f2277e.js","mappings":"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","sources":["webpack://vue-three-exp/./src/views/ExpView03.vue","webpack://vue-three-exp/./src/views/ExpView03.vue?4f06"],"sourcesContent":["<template>\r\n    <div class=\"ExpView03\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nexport default {\r\n  name: 'ExpView03',\r\n  data () {\r\n    return {}\r\n  },\r\n  methods: {\r\n    main () {\r\n      this.container = document.querySelector('.ExpView03')\r\n      this.renderer = new THREE.WebGLRenderer({ antialias: true })\r\n      this.renderer.setSize(this.container.clientWidth, this.container.clientHeight)\r\n      this.renderer.setPixelRatio(devicePixelRatio)\r\n      this.container.appendChild(this.renderer.domElement)\r\n\r\n      this.scene = new THREE.Scene()\r\n      this.scene.background = new THREE.Color(0x000000)\r\n\r\n      const fov = 45\r\n      const aspect = this.container.clientWidth / this.container.clientHeight\r\n      const near = 0.01\r\n      const far = 500\r\n      this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far)\r\n      this.camera.position.set(15, 20, 5)\r\n      this.scene.add(this.camera)\r\n\r\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n\r\n      this.light = new THREE.DirectionalLight({ color: 0xffffff, intencity: 1 })\r\n      this.light.position.set(-1, 2, 4)\r\n      this.scene.add(this.light)\r\n\r\n      const plGeo = new THREE.PlaneGeometry(20, 20)\r\n      const plMate = new THREE.MeshBasicMaterial({ side: THREE.DoubleSide })\r\n      const plane = new THREE.Mesh(plGeo, plMate)\r\n      this.scene.add(plane)\r\n      plane.rotateX(-Math.PI / 2)\r\n      plane.visible = false\r\n      plane.name = 'plane'\r\n\r\n      const mountPlane = new THREE.Mesh(\r\n        new THREE.PlaneGeometry(1, 1),\r\n        new THREE.MeshBasicMaterial({\r\n          side: THREE.DoubleSide\r\n        }))\r\n      this.scene.add(mountPlane)\r\n      mountPlane.rotateX(-Math.PI / 2)\r\n      mountPlane.position.set(0.5, 0, 0.5)\r\n\r\n      const mouseP = new THREE.Vector2()\r\n      const rayCaster = new THREE.Raycaster()\r\n\r\n      let intersects\r\n      window.addEventListener('mousemove', e => {\r\n        mouseP.x = (e.clientX / window.innerWidth) * 2 - 1\r\n        mouseP.y = -(e.clientY / window.innerHeight) * 2 + 1\r\n        rayCaster.setFromCamera(mouseP, this.camera)\r\n        intersects = rayCaster.intersectObjects(this.scene.children)\r\n        intersects.forEach(intersect => {\r\n          if (intersect.object.name === 'plane') {\r\n            const mountPos = new THREE.Vector3().copy(intersect.point).floor().addScalar(0.5)\r\n            mountPlane.position.set(mountPos.x, 0, mountPos.z)\r\n\r\n            const overlapCheck = this.Meshs.find((obj) => {\r\n              return (obj.position.x === mountPlane.position.x) && (obj.position.z === mountPlane.position.z)\r\n            })\r\n\r\n            if (!overlapCheck) {\r\n              mountPlane.material.color.setHex(0xffffff)\r\n            } else {\r\n              mountPlane.material.color.setHex(0xff0000)\r\n            }\r\n          }\r\n        })\r\n      })\r\n\r\n      const createMesh = new THREE.Mesh(\r\n        new THREE.SphereGeometry(0.5, 4, 2),\r\n        new THREE.MeshBasicMaterial({\r\n          color: '#ff0000',\r\n          wireframe: true\r\n        })\r\n      )\r\n\r\n      this.Meshs = []\r\n\r\n      window.addEventListener('mousedown', () => {\r\n        const overlapCheck = this.Meshs.find((obj) => {\r\n          return (obj.position.x === mountPlane.position.x) && (obj.position.z === mountPlane.position.z)\r\n        })\r\n\r\n        if (!overlapCheck) {\r\n          intersects.forEach(intersect => {\r\n            if (intersect.object.name === 'plane') {\r\n              const createClone = createMesh.clone()\r\n              createClone.position.copy(mountPlane.position)\r\n              this.scene.add(createClone)\r\n              this.Meshs.push(createClone)\r\n            }\r\n          })\r\n        } else if (this.scene.children.length > 5) {\r\n          const lastMesh = this.scene.children.length - 1\r\n          this.scene.remove(this.scene.children[lastMesh])\r\n          this.Meshs.pop()\r\n        }\r\n      })\r\n\r\n      const grid = new THREE.GridHelper(20, 20)\r\n      this.scene.add(grid)\r\n    },\r\n    render (time) {\r\n      this.renderer.render(this.scene, this.camera)\r\n      requestAnimationFrame(this.render)\r\n      this.Meshs.forEach(obj => {\r\n        obj.rotation.x = time / 1000\r\n        obj.rotation.z = time / 1000\r\n        obj.position.y = 1 * Math.abs(Math.sin(time / 1000))\r\n      })\r\n      this.controls.update()\r\n      this.reSize()\r\n    },\r\n    reSize () {\r\n      const container = this.container\r\n      this.renderer.setSize(container.clientWidth, container.clientHeight)\r\n      this.camera.aspect = container.clientWidth / container.clientHeight\r\n      this.camera.updateProjectionMatrix()\r\n    }\r\n  },\r\n  mounted () {\r\n    this.main()\r\n    this.render()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .ExpView03{\r\n    width:100%;\r\n    height: 100%;\r\n  }\r\n</style>\r\n","import { render } from \"./ExpView03.vue?vue&type=template&id=988d2ba0&scoped=true\"\nimport script from \"./ExpView03.vue?vue&type=script&lang=js\"\nexport * from \"./ExpView03.vue?vue&type=script&lang=js\"\n\nimport \"./ExpView03.vue?vue&type=style&index=0&id=988d2ba0&scoped=true&lang=scss\"\n\nimport exportComponent from \"C:\\\\Users\\\\LINE\\\\Desktop\\\\workspace\\\\testVue\\\\vue-three-exp\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-988d2ba0\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","name","data","methods","main","this","container","document","querySelector","renderer","THREE","antialias","setSize","clientWidth","clientHeight","setPixelRatio","devicePixelRatio","appendChild","domElement","scene","background","fov","aspect","near","far","camera","position","set","add","controls","OrbitControls","light","color","intencity","plGeo","plMate","side","plane","rotateX","Math","PI","visible","mountPlane","mouseP","rayCaster","intersects","window","addEventListener","e","x","clientX","innerWidth","y","clientY","innerHeight","setFromCamera","intersectObjects","children","forEach","intersect","object","mountPos","copy","point","floor","addScalar","z","overlapCheck","Meshs","find","obj","material","setHex","createMesh","wireframe","length","lastMesh","remove","pop","createClone","clone","push","grid","render","time","requestAnimationFrame","rotation","abs","sin","update","reSize","updateProjectionMatrix","mounted","__exports__"],"sourceRoot":""}